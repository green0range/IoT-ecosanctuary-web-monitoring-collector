#! /usr/bin/python

import math
import serial
import time

class Connection:
	def __init__(self):
		# Setup port and baudrate
		self.port="/dev/ttyAMA0"
		self.baud=2400
		#open serial port
		self.ser = serial.Serial(self.port, self.baud, timeout=2)
		# Get codes on start up
		try:
			f = open(".receiverpass")
			codes = f.read().split("\n")
			self.codes = []
			for i in range(0, len(codes)):
				if not list(codes[i])[0] == '#':
					self.codes.append(int(codes[i]))
		except:
			pass
	def get_input(self):
		data = self.ser.readline()
		#print data
		if "SetRe" in data:
			picaxe_config = chr(99)+chr(111)+chr(110)+chr(102)+chr(58)+chr(self.codes[0])+chr(self.codes[1])
			#print picaxe_config
			self.ser.write(picaxe_config)
			#print "sent config..."
		data_array = list(data)
		#print data_array
		for i in range(0, len(data_array)):
			if ord(data_array[i]) == 254:
				data_array[i] = "\n" # 254 is used instead of 10, so that it doesn't end the line during serial transmit, this turns it back.
		try:
			data_array.pop() # pops off the \n
			checksum = ord(data_array.pop())
		except:
			checksum = 500
		check = 0
		for j in range(0, len(data_array)):
            		check += ord(data_array[j])
            	for i in range(0, len(self.codes)):
            		check += int(self.codes[i])
        	check = (check/((len(data_array) + len(self.codes))))
		check = int(math.floor(check))
		#print "CHECK:	" + str(check) + "CHECKSUM:	" + str(checksum)
        	num_data = []
		for i in range(0, len(data_array)):
        		num_data.append(ord(data_array[i]))
        	num_data.append(time.time())
		print num_data
        	if check == checksum:
        		return num_data
        	else:
        		print "incorrect check"
			if num_data == []:
        			self.get_input()
			else:
				return -1
